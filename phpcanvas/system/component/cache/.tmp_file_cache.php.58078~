<?php
/**
* Caching system using file.
* @author Gian Carlo Val Ebao
* @version 1.0.4
* @package System
* @subpackage Component
**/
class FileCache extends AbstractCache {
    
    private $path = '';
    private $expires = null;
    /**
    * Initializes the properties of the class.
    * @param string $path Folder where the logs will be stored.
    * @param string $nameSpace Optional, recommended for a quicker access to the cache.
    * @param int $expires Optional, expiration date of the cache, default is 1 day.
    **/
    public function __construct($path, $nameSpace = '', $expires = null) {
        $this->path = $path;
        $this->expires = (int) date('Ymd', time() + (empty($expires) ?  86400: $expires));
        
        if (!empty($nameSpace)) {
            $this->path = $path . '/ns' . md5($nameSpace);
        }
        
        if (!is_dir($this->path)) {
            mkdir($this->path, 0777, true);
        }
    }
    
    private function write($file, $string) {
        if (!file_exists($this->path)) {
            $this->initialize($this->path);
        }
        
        return file_put_contents($file, $string);
    }
    
    private function read($file) {
        if (!file_exists($file) || !is_readable($file)) {
            return false;
        }
        
        return file_get_contents($file);
    }
    
    private function toFile($key) {
        return $this->path . '/' . md5('cache' . $key . '.cch');
    }
    
    /**
    * Creates a cache.
    * @param string $key Unique reference key of the cache.
    * @param string|array $value the value to be stored.
    * @returns string
    **/
    public function set($key, $value) {
        if (empty($value)) {
            return false;
        }
        
        $s = $this->expires . (is_array($value) || is_object($value) ? ':O:' . json_encode($value): ":S:$value");
        return $this->write($this->toFile($key), $s);
    }
    
    /**
    * Clears all the cache created.
    * If a namespace was supplied, clears only the cache with the namespace.
    * @returns boolean
    **/
    public function clear() {
        $path = $this->path;
        
        if(empty($path) || !is_dir($path) || 2 >= count(scandir($path))) {
            return false;
        }
        
        $scan = glob("$path/*");
        
        do {
            unlink(array_shift($scan));
        } while(!empty($scan));
        
        rmdir($path);
        return true;
    }
    
    /**
    * Gets a cached value.
    * @param string $key Unique reference key of the cache.
    * @param boolean $isObj returns result as object or array. disregarded if the value is of the cache is not an array.
    * @returns string|array
    **/
    public function get($key, $isObj = false) {
        $r = $this->read($this->toFile($key));
        
        $now = (int) date('Ymd');
        
        if(false === $r || $now >= (int) substr($r, 0, 8)) {
            return false;
        }
        
        switch (substr($r, 9, 1)) {
            case 'O':
                return json_decode(substr($r,11), !$isObj);
            default:
            case 'S':
                return substr($r,11);
        }
    }
}